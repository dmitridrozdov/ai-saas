import React from 'react';
import { render } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import TestPage from '../app/(dashboard)/(routes)/agents/page'; // Adjust the import path as needed
import axios from 'axios';

jest.mock('axios');
const mockedAxios = axios as jest.Mocked<typeof axios>;

describe('TestPage', () => {
  beforeEach(() => {
    mockedAxios.get.mockReset();
    mockedAxios.post.mockReset();
  });

  it('renders initial elements', () => {
    const { getByText, getByRole, getByTestId } = render(<TestPage />);
    expect(getByText('Test Page')).toBeInTheDocument();
    expect(getByRole('button', { name: 'Fetch Data' })).toBeInTheDocument();
    expect(getByRole('button', { name: 'Increment Counter' })).toBeInTheDocument();
    expect(getByTestId('input-field')).toBeInTheDocument();
    expect(getByTestId('submit-input-button')).toBeInTheDocument();
    expect(getByTestId('dropdown')).toBeInTheDocument();
    expect(getByTestId('checkbox-1')).toBeInTheDocument();
    expect(getByTestId('radio-1')).toBeInTheDocument();
    expect(getByTestId('textarea')).toBeInTheDocument();
    expect(getByTestId('list')).toBeInTheDocument();
  });

  it('fetches data on mount and displays it', async () => {
    mockedAxios.get.mockResolvedValue({ data: { message: 'Test data' } });
    const { getByText, findByText } = render(<TestPage />);
    await findByText('Data: Test data');
    expect(mockedAxios.get).toHaveBeenCalledWith('/api/testData');
  });

  it('displays error message when fetch data fails', async () => {
    mockedAxios.get.mockRejectedValue(new Error('Fetch failed'));
    const { findByText } = render(<TestPage />);
    await findByText('Error: Fetch failed');
  });

  it('increments counter when increment button is clicked', () => {
    const { getByRole, getByText } = render(<TestPage />);
    userEvent.click(getByRole('button', { name: 'Increment Counter' }));
    expect(getByText('Counter: 1')).toBeInTheDocument();
  });

  it('submits input and displays result', async () => {
    mockedAxios.post.mockResolvedValue({ data: { result: 'Processed input: test' } });
    const { getByTestId, getByRole, findByText } = render(<TestPage />);
    userEvent.change(getByTestId('input-field'), { target: { value: 'test' } });
    userEvent.click(getByRole('button', { name: 'Submit Input' }));
    await findByText('Data: Processed input: test');
    expect(mockedAxios.post).toHaveBeenCalledWith('/api/processInput', { input: 'test' });
  });

  it('displays error when submit input fails', async () => {
    mockedAxios.post.mockRejectedValue(new Error('Submit failed'));
    const { getByTestId, getByRole, findByText } = render(<TestPage />);
    userEvent.change(getByTestId('input-field'), { target: { value: 'test' } });
    userEvent.click(getByRole('button', { name: 'Submit Input' }));
    await findByText('Error: Submit failed');
  });

  it('updates dropdown value when changed', () => {
    const { getByTestId } = render(<TestPage />);
    fireEvent.change(getByTestId('dropdown'), { target: { value: 'Option 2' } });
    expect((getByTestId('dropdown') as HTMLSelectElement).value).toBe('Option 2');
  });

  it('updates checkbox state when clicked', () => {
    const { getByTestId } = render(<TestPage />);
    fireEvent.click(getByTestId('checkbox-1'));
    expect((getByTestId('checkbox-1') as HTMLInputElement).checked).toBe(true);
  });

  it('updates radio button state and textarea when clicked', () => {
    const { getByTestId } = render(<TestPage />);
    fireEvent.click(getByTestId('radio-2'));
    expect((getByTestId('radio-2') as HTMLInputElement).checked).toBe(true);
    expect(getByTestId('textarea').textContent).toBe('Radio button "Radio 2" selected.');
  });

  it('updates textarea value when changed', () => {
    const { getByTestId } = render(<TestPage />);
    fireEvent.change(getByTestId('textarea'), { target: { value: 'New text' } });
    expect(getByTestId('textarea').textContent).toBe('New text');
  });

  it('displays loading state when fetching data', () => {
    mockedAxios.get.mockImplementation(() => new Promise(() => {}));
    const { getByText } = render(<TestPage />);
    expect(getByText('Loading...')).toBeInTheDocument();
  });

  it('displays loading state when submitting input', () => {
    mockedAxios.post.mockImplementation(() => new Promise(() => {}));
    const { getByTestId, getByRole, getByText } = render(<TestPage />);
    fireEvent.change(getByTestId('input-field'), { target: { value: 'test' } });
    fireEvent.click(getByRole('button', { name: 'Submit Input' }));
    expect(getByText('Loading...')).toBeInTheDocument();
  });
});